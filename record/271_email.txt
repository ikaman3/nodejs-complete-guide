271_How Does Sending Mails Work?

메일을 보내는 원리는 무엇일까?
코드가 있는 노드 서버가 있고 사용자가 있다. 이 사용자에게 이메일을 보내려 한다. 여기서 흔히 잘못 알고 있는 중요한 점은 Node.js와 Express.js는 언어 또는 프레임워크 런타임으로 서버 측 논리를 구현하는 데 사용되지만 Node.js로는 메일 서버를 간단하게 만들 수 없다. 메일을 handling 하는 것은 들어오는 요청과 응답을 핸들링하는 것과는 완전히 다르다. 완전히 다른 기술이며 백그라운드에서 일어나는 일도 완전히 다르다. 따라서 현실적으로 매우 복잡한 작업이므로 스스로 메일 서버를 구축할 가능성은 낮다. 수천 또는 수만의 메일을 동시에 처리하고 보내는 메일 서버를 만드는 일은 보안 등 여러 측면에서 매우 복잡한 일이다. 
그러므로 현실적으로 제3자 메일 서버를 활용하게 될 것이다. 이러한 서비스와 어떻게 상호작용해서 이메일을 보내는 지 배울 것이다. 
==========================================================================================
272_SendGrid

하루에 100개 이하로 발송하면 무료로 사용할 수 있어서 선택하였다. Mailchimp, AWS, SCS 등의 많은 대체 서비스가 있고 Nodemailing을 검색해서 원하는 서비스 사용법을 선택해도 좋다. 

npm install --save nodemailer nodemailer-sendgrid-transport  
- nodemailer는 Node.js에서 메일을 쉽게 보낼 수 있도록 해주는 패키지다.
- SendGrid와 상호작용 하기위한 패키지인 nodemailer-sendgrid-transport 를 설치한다.
==========================================================================================
273_SendGrid 사용하여 이메일 보내기

먼저 이 패키지와 상호작용할 유일한 파일인 auth.js 파일로 간다.

    const nodemailer = require('nodemailer');
    const sendgridTransport = require('nodemailer-sendgrid-transport');

임포트를 마치면 초기화를 한다. nodemailer에서는 transporter라는 것을 초기화 해야한다.
    const transporter = nodemailer.createTransport(sendgridTransport({
        auth: {
         // api_user: 
            api_key: '...'
        }
    }));
- 이메일을 어떻게 전달할지 nodemailer에 알려주는 설정으로 Node.js에서 스스로 하지 못하므로 제3자 서비스가 필요하다.
- sendgridTransport() 함수는 SendGrid를 사용하는데 활용 가능한 환경 설정값을 준다. 이 함수에 auth 객체를 전달하는데 이 역시 객체를 포함한다. api_user 및 api_key 필드에 입력한다. 사용자명과 비밀번호를 사용해도 되지만 여기서는 API 키를 사용한다. 

이제 가입 후에 이메일을 발송할 것이므로 postSignup의 리다이렉트 전으로 간다.
    return transporter.sendMail({
        to: email,
        from: 'shop@node-complete.com',
        subject: 'Signup succeeded!',
        html: '<h1>You successfully signed up!</h1>'
    });
- transporter.sendMail() 메서드를 사용한다. 이 메서드에는 발송하려는 이메일의 설정이 포함된 자바스크립트 객체를 입력한다.
- to는 누구에게 보낼지 입력한다. 당연히 사용자의 email 주소로 보낸다.
- from은 발신자로 표시될 이메일 주소이다.
- html은 html 컨텐츠, 즉 이메일의 내용이다. 
- sendMail은 프로미스를 주기 때문에 then, catch가 사용 가능하다. 또는 이를 return하고 이메일을 발송한 후 다음 then 블록에서 리다이렉트해도 된다. 발송을 기다리지 않고 바로 리다이렉트해서 발송 여부에 의존하지 않도록 해도 된다.

* SendGrid의 정책 변경으로 서비스를 이용하기 전에 인증 절차가 생겼다. 현재는 방법을 잘 모르겠으므로 코드를 주석 처리하고 추후에 수정할 것.
=> 임시 해결: Nodemailer를 이용하여 개인용 Gmail을 보내는 것으로 일단 해결하였으나 실제 서비스에선 메일 서비스를 이용해야 하니 메일 서비스 이용 방식도 추가할 것.
==========================================================================================
274_대형 앱의 잠재적인 한계

지금의 방식은 앱에 적합하다. 요청이 많은 앱의 경우 리다이렉트되기 전에 이메일 발송을 기다리게 되므로 리다이렉트를 막지 않고 동시에 메일을 보내는 것이 좋다.

앱의 규모에 따라 정말로 거대한 앱이라면 완전히 다른 접근법을 고려할 수 있다. 서버 측 스크립트를 일정 시간, 분 단위로 실행하여 새로 가입한 사용자에게 이메일을 발송하게 하는 것이다. 이는 특정 규모 이상의 앱에만 해당되고 또 다른 여러 문제가 있다. 

중요한 점은 이메일 발송을 막는 방식으로 구현하지 않는 게 좋다는 것이다. 완료되기를 기다리면 처리가 느려질 수도 있고 기다릴 가치가 있는지 혹은 메일이 발송되지 않아도 사용자가 계속 진행해도 되는지 판단해야 한다.